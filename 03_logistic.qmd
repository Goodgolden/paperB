---
title: "Propensity Score"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      warnings = FALSE,
                      message = FALSE,
                      comment = "#>",
                      #results = "hide",
                      digits = 4,
                      error = FALSE)

## clean the R environment
graphics.off()
rm(list = ls())
freshr::freshr()

## load packages
library(here, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(gtsummary, quietly = TRUE)
library(flextable, quietly = TRUE)
library(broom.mixed)
library(MetBrewer)


library(brinla, quietly = TRUE)
library(INLA, quietly = TRUE)

## check the directory for the file
# here::dr_here()
here::set_here()

## the figure or results should be saved 
# paste0("foldername/Sfilename_workingresult_", 
#      Sys.Date(), ".filetype")

```

## Logistic regression with the `glm()` {#sec-c4-logistic}

```{r}
load("new_data/demo_clean_caregiver_merge_2_2023-11-02.Rdata") 
```

```{css, echo=FALSE}
.scroll-100 {
  max-height: 300px;
  max-width: 900px;
  overflow-y: auto;
  overflow-x: auto !important;
  background-color: inherit;
}
```

The dataset we used for caregiver table1 @sec-c1-table1

```{r "dataset", class.output="scroll-100"}
caregiver_table_2
```

The only missing we have would be the caregivers without any patient.

```{r "missing"}
names(caregiver_table_2)
## the missing pattern
nlmeU:::missPat(caregiver_table_2) %>% table()
```

```{r "logistic"}
set.seed(555)

ps_mod1 <- glm(randomize ~ 0 + primary_caregiver + primary_reason + employed + 
                      education + language + gender + ethnicity + race + diagnosis +
                      stage + step + income + household + age + 
                      relationship + hours + hospital,
                    data = caregiver_table_2,
                    family = binomial("logit"))
```

```{r "results_logisitic", class.output="scroll-100"}
summary(ps_mod1)

tidy(ps_mod1)
```

## INLA logistic {#sec-c3-inla-logstic}

```{r "inla_logistic"}


inla1 <-randomize ~ 0 + primary_caregiver + primary_reason + employed + 
                      education + language + gender + ethnicity + race + diagnosis +
                      stage + step + income + household + age + 
                      relationship + hours + hospital

# ps_inla1 <- inla(inla1, family = "binomial", 
#                data = caregiver,
#                Ntrials = 1,
#                keep = TRUE)

ps_inla1 <- inla(inla1, family = "binomial", 
               data = caregiver_table_2,
               Ntrials = 1,
               keep = TRUE,
               ## saving the inla file
               # working.directory = "ini/ini_file_inla_p",
               ## this is imputing the missing values in inla
               control.predictor = list(compute = TRUE),
               control.compute = list(return.marginals.predictor = TRUE,
                                      cpo = TRUE,
                                      dic = TRUE,
                                      waic = TRUE,
                                      config = TRUE))
```

Here is the logistic results $\beta$

```{r "inla_results", class.output="scroll-100"}
round(ps_inla1$summary.fixed, 4)
```

```{r class.output="scroll-100"}
## add the weights into the dataset
caregiver_table_2 %<>%
  mutate(ps = ps_inla1$summary.fitted.values$mode) %>%
  mutate(weights = ifelse(randomize == 1, 1 / ps, 1 / (1 - ps)))

caregiver_score <- read.csv("new_data/score_caregiver_survey_scored.csv")

caregiver_longitudinal <- caregiver_score %>%
  mutate(cid = as.character(uniqueid2)) %>%
  dplyr::select(-record_id, -spanish, -randomize, -language,
                -stage, -stage2, -diagnosis, -diagn.lc, 
                -gender_clean, -hospital, -status2) %>%
  full_join(caregiver_table_2, by = join_by(cid == cid)) %>%
  dplyr::select(cid, pid, randomize, everything())

# save(caregiver_longitudinal, 
#      file = paste0("new_data/longitudinal_demo_score_caregiver_", Sys.Date(), ".csv"))
# save(caregiver_longitudinal, 
#      file = paste0("new_data/longitudinal_demo_score_caregiver_", Sys.Date(), ".Rdata"))
```

```{r class.output="scroll-100"}
#| label: missing_longitudinal
#| eval: true
#| include: true
names(caregiver_longitudinal)
nlmeU:::missPat(caregiver_longitudinal) %>% table()
```

```{r propensity_score}

# Use the delightful Isfahan1 palette from the MetBrewer package
isfahan <- MetBrewer::met.brewer("Isfahan1")

# # Custom ggplot theme to make pretty plots
# # Get Archivo Narrow at https://fonts.google.com/specimen/Archivo+Narrow
# theme_nice <- function() {
#   theme_minimal(base_family = "Archivo Narrow") +
#     theme(panel.grid.minor = element_blank(),
#           plot.background = element_rect(fill = "white", color = NA),
#           plot.title = element_text(face = "bold"),
#           axis.title = element_text(face = "bold"),
#           strip.text = element_text(face = "bold", size = rel(0.8), hjust = 0),
#           strip.background = element_rect(fill = "grey80", color = NA),
#           legend.title = element_text(face = "bold"))
# }
# 
# # Use this theme on all plots
# theme_set(
#   theme_nice()
# )
# 
# # Make all labels use Archivo by default
# update_geom_defaults("label", 
#                      list(family = "Archivo Narrow",
#                           fontface = "bold"))

plot4 <- ggplot() + 
  geom_histogram(data = filter(caregiver_longitudinal, randomize == 1), 
                 bins = 30, aes(x = ps), 
                 fill = isfahan[2]) + 
  geom_histogram(data = filter(caregiver_longitudinal, randomize == 0), 
                 bins = 30, aes(x = ps, y = -..count..), 
                 fill = isfahan[6]) +
  geom_hline(yintercept = 0) +
  annotate(geom = "label", x = 0.1, y = 20, label = "Treated", 
           color = "black", hjust = 0) +
  annotate(geom = "label", x = 0.1, y = -20, label = "Untreated", 
           color = "black", hjust = 0) +
  scale_y_continuous(label = abs) +
  coord_cartesian(xlim = c(0, 1), ylim = c(-150, 150)) +
  labs(x = "Propensity", y = "Count")


plot5 <- ggplot() + 
  geom_histogram(data = filter(caregiver_longitudinal, randomize == 1), 
                 bins = 30, aes(x = ps, weight = weights), 
                 fill = colorspace::lighten(isfahan[2], 0.35)) + 
  geom_histogram(data = filter(caregiver_longitudinal, randomize == 0), 
                 bins = 30, aes(x = ps, weight = weights, y = -..count..),
                 fill = colorspace::lighten(isfahan[6], 0.35)) +
  geom_histogram(data = filter(caregiver_longitudinal, randomize == 1), 
                 bins = 30, aes(x = ps), 
                 fill = isfahan[2]) + 
  geom_histogram(data = filter(caregiver_longitudinal, randomize == 0), 
                 bins = 30, aes(x = ps, y = -..count..),
                 fill = isfahan[6]) +
  annotate(geom = "label", x = 0.8, y = 140, label = "Treated (actual)", 
           fill = isfahan[2], color = "white", hjust = 1) +
  annotate(geom = "label", x = 0.8, y = 120, label = "Treated (IPTW pseudo-population)", 
           fill = colorspace::lighten(isfahan[2], 0.35), color = "white", hjust = 1) +
  annotate(geom = "label", x = 0.8, y = -120, label = "Untreated (actual)", 
           fill = isfahan[6], color = "white", hjust = 1) +
  annotate(geom = "label", x = 0.8, y = -140, label = "Untreated (IPTW pseudo-population)", 
           fill = colorspace::lighten(isfahan[6], 0.35), color = "white", hjust = 1) +
  geom_hline(yintercept = 0, color = "white", size = 0.25) +
  scale_y_continuous(label = abs) +
  coord_cartesian(xlim = c(0, 1), ylim = c(-150, 150)) +
  labs(x = "Propensity", y = "Count") 
```

```{r}
#| label: correction_ps
#| fig-cap: Propensity Score Correction

plot4 + theme_bw()
plot5 + theme_bw()
```
